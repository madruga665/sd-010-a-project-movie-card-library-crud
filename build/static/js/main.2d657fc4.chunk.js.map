{"version":3,"sources":["assets/unicorn.gif","components/Loading.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","className","src","unicorn","alt","Component","MovieCard","movie","this","props","title","storyline","imagePath","rating","data-testid","to","id","React","movies","subtitle","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovies","Promise","resolve","getMovie","movieId","find","mov","parseInt","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","fetchMovies","a","movieAPI","setState","loading","state","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderRatingInput","renderGenreSelection","renderSubmitButton","MovieDetails","NewMovie","movieSubmit","EditMovie","match","params","shouldRedirect","NotFound","Header","Footer","App","basename","process","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d657fc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unicorn.66463b37.gif\";","import React, { Component } from \"react\";\nimport unicorn from \"../assets/unicorn.gif\";\nimport \"./styles/Loading.css\";\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">\n        <img src={unicorn} alt=\"unicorn gif felix\" />\n        <h2>Carregando...</h2>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport \"./styles/MovieCard.css\";\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, imagePath, rating } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img src={imagePath} alt=\"foto do filme\" />\n        <div className=\"content\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <footer>\n          <div className=\"rating\">\n            <p>Rating: { rating }</p>\n          </div>\n          <Link to={`movies/${movie.id}`}>VER DETALHES</Link>\n        </footer>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  title: PropTypes.string,\n}.isRequired;\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport Loading from '../components/Loading';\nimport MovieCard from '../components/MovieCard';\nimport './styles/MovieList.css'\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  fetchMovies = async () => {\n    const { getMovies } = movieAPI;\n    const data = await getMovies();\n    this.setState({ movies: data, loading: false });\n  };\n\n  render() {\n    const { movies, loading } = this.state;\n\n    return (\n      <div className=\"movie-list\" data-testid=\"movie-list\">\n        {loading === true\n          ? <Loading />\n          : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles/MovieForm.css';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"movie-form-control\">\n        <label htmlFor=\"movie_title\">\n          Título \n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"movie-form-control\">\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo \n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"movie-form-control row\">\n        <label htmlFor=\"movie_image\">\n        Imagem \n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"movie-form-control\">\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div className=\"movie-form-control\">\n        <label htmlFor=\"movie_genre\">\n          Gênero \n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div className=\"movie-form-control\">\n        <label htmlFor=\"movie_rating\">\n          Avaliação \n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div className=\"movie-form-control\">\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n        <form className=\"movie-form-container\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderRatingInput()}\n          {this.renderGenreSelection()}\n          {this.renderSubmitButton()}\n        </form>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func,\n}.isRequired;\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\nimport './styles/MovieDetails.css';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  fetchMovies = async () => {\n    const { id } = this.props;\n    const { getMovie } = movieAPI;\n    const data = await getMovie(id);\n    this.setState({ movies: data, loading: false });\n  };\n\n  deleteMovie = async () => {\n    const { id } = this.props;\n    const { deleteMovie } = movieAPI;\n    const data = await deleteMovie(id);\n    return data;\n  };\n\n  render() {\n    const { loading, movies } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle } = movies;\n    const { id } = this.props;\n\n    if (loading) return <Loading />;\n\n    return (\n      <section className=\"movie-details-container\" data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <div className=\"movie-details-content\">\n          <h4>{title}: {subtitle}</h4>\n        <div className=\"genre-rating\">\n          <p>{genre} </p>\n          <p>{rating}</p>\n        </div>\n          <h4>Storyline:</h4>\n          {storyline}\n        </div>\n        <div className=\"buttom-container\">\n          <Link to=\"/\">VOLTAR</Link>\n          <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n          <Link to=\"/\" onClick={ () => this.deleteMovie() }>DELETAR</Link>\n        </div>\n      </section>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  id: PropTypes.number,\n}.isRequired;\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { movieSubmit: false };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    const { createMovie } = movieAPI;\n    await createMovie(newMovie);\n    this.setState({ movieSubmit: true });\n  }\n\n  render() {\n    const { movieSubmit } = this.state;\n    if (movieSubmit) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: {},\n      loading: true,\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  async handleSubmit(updatedMovie) {\n    const { updateMovie } = movieAPI;\n    await updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  fetchMovies = async () => {\n    const { match: { params: { id } } } = this.props;\n    const { getMovie } = movieAPI;\n    const data = await getMovie(id);\n    this.setState({ movie: data, loading: false });\n  };\n\n  render() {\n    const { shouldRedirect, movie, loading } = this.state;\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (loading) return <Loading />;\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  id: PropTypes.number,\n}.isRequired;\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles/Header.css'\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <Link to='/'>\n          <h1 className=\"page-title\">Movie Cards Library</h1>\n        </Link>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./styles/Footer.css\";\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </footer>\n    );\n  }\n}\nexport default Footer;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport Header from './components/Header';\nimport './App.css';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Header />\n    <Footer />\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route\n          path=\"/movies/:id\"\n          render={ ({ match: { params: { id } } }) => <MovieDetails id={ id } /> }\n        />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}